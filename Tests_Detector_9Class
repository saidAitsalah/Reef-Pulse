{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sDTQbVNHu2UM","executionInfo":{"status":"ok","timestamp":1733915790550,"user_tz":-60,"elapsed":27916,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"c066674b-8430-4bb6-f240-27a1472e43da"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["import librosa\n","import matplotlib.pyplot as plt\n","import os\n","import pandas as pd\n","import seaborn as sns\n","import numpy as np\n","import ast\n","import itertools\n","from itertools import cycle\n","\n","import lightgbm as lgb\n","import xgboost as xgb\n","\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.preprocessing import LabelEncoder, StandardScaler\n","from sklearn.model_selection import train_test_split, GridSearchCV\n","from sklearn.metrics import accuracy_score, confusion_matrix, ConfusionMatrixDisplay\n","from sklearn.svm import SVC"],"metadata":{"id":"suD3UrHZu3Hg","executionInfo":{"status":"ok","timestamp":1733915806041,"user_tz":-60,"elapsed":10744,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"a09fb923-e341-4a82-de90-0aa6e36a55f1"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.10/dist-packages/dask/dataframe/__init__.py:42: FutureWarning: \n","Dask dataframe query planning is disabled because dask-expr is not installed.\n","\n","You can install it with `pip install dask[dataframe]` or `conda install dask`.\n","This will raise in a future version.\n","\n","  warnings.warn(msg, FutureWarning)\n"]}]},{"cell_type":"markdown","source":["# Creation du DataFrame"],"metadata":{"id":"k2zn1tlLvVhd"}},{"cell_type":"code","source":["csv_path = '/content/drive/MyDrive/PER/Data/fichiers_audio.csv'\n","audio_directory = '/content/drive/MyDrive/PER/Data/sounds'\n","avec_syntetiques = False"],"metadata":{"id":"zQfbh44nu_RS"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Verification de la bande de son"],"metadata":{"id":"kt58MljpvFSt"}},{"cell_type":"code","source":["print(\"Chargement du DataFrame...\")\n","df = pd.read_csv(csv_path)\n","df = df.dropna().reset_index(drop=True)\n","print(f\"Nombre total d'enregistrements après suppression des NaN : {df.shape[0]}\")\n","\n","\n","print(\"\\nCréation des chemins complets des fichiers audio...\")\n","df['file_path'] = df['name'].apply(lambda x: os.path.join(audio_directory, x))\n","print(df[['name', 'file_path']].head())\n","\n","\n","print(\"\\nVérification de l'existence des fichiers audio...\")\n","df['file_exists'] = df['file_path'].apply(os.path.exists)\n","missing_files = df[~df['file_exists']]\n","if not missing_files.empty:\n","    print(f\"\\n{missing_files.shape[0]} fichiers audio sont manquants. Ils seront supprimés du DataFrame.\")\n","    print(missing_files[['name', 'file_path']])\n","    df = df[df['file_exists']].reset_index(drop=True)\n","else:\n","    print(\"Tous les fichiers audio existent.\")\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vLPsp5-6vDGx","executionInfo":{"status":"ok","timestamp":1733915835192,"user_tz":-60,"elapsed":2509,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"a53f34a6-38f5-4e4d-97ff-d222b6ef7de3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Chargement du DataFrame...\n","Nombre total d'enregistrements après suppression des NaN : 398\n","\n","Création des chemins complets des fichiers audio...\n","                                                name  \\\n","0  bioback_EUR000_possession_20181116_123632.991_...   \n","1  bioback_EUR000_possession_20181116_123632.991_...   \n","2  bioback_EUR000_possession_20181116_123632.991_...   \n","3  bioback_EUR000_possession_20190121_124442.685_...   \n","4  bioback_EUR000_possession_20190121_124442.685_...   \n","\n","                                           file_path  \n","0  /content/drive/MyDrive/PER/Data/sounds/bioback...  \n","1  /content/drive/MyDrive/PER/Data/sounds/bioback...  \n","2  /content/drive/MyDrive/PER/Data/sounds/bioback...  \n","3  /content/drive/MyDrive/PER/Data/sounds/bioback...  \n","4  /content/drive/MyDrive/PER/Data/sounds/bioback...  \n","\n","Vérification de l'existence des fichiers audio...\n","\n","2 fichiers audio sont manquants. Ils seront supprimés du DataFrame.\n","                                                  name  \\\n","365  UFPSRFD_MAY044_channelA_2023-11-18_17-13-55_53...   \n","366  UFPSRFD_MAY044_channelA_2023-11-18_17-13-55_54...   \n","\n","                                             file_path  \n","365  /content/drive/MyDrive/PER/Data/sounds/UFPSRFD...  \n","366  /content/drive/MyDrive/PER/Data/sounds/UFPSRFD...  \n"]}]},{"cell_type":"code","source":["class_names = df['target'].unique()\n","print(class_names)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"0o2FPYV_1rV1","executionInfo":{"status":"ok","timestamp":1733915838973,"user_tz":-60,"elapsed":353,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"f280ba41-5270-47f1-e03a-d13bcf1f7062"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["['bioback' 'bio' 'boat' 'CSPS' 'diver' 'FPS' 'FSCFD' 'FSC' 'grouper'\n"," 'parrot' 'Pbrt' 'Pbr' 'Pbt' 'Pb' 'PB' 'PS' 'PU' 'rain' 'RFPSFD' 'RFPSFU'\n"," 'RFPSRD' 'RFPSRU' 'RFPS' 'SCFD' 'SC' 'shock' 'species2' 'SPSFD' 'SPSFU'\n"," 'SPSRD' 'SPSRU' 'SPS' 'SSC' 'turtle' 'UCFD' 'UCFPS' 'UCFU' 'UC' 'UFPSFD'\n"," 'UFPSFU' 'UFPSRD' 'UFPSRFD' 'UFPSRU' 'UFPS' 'whale']\n"]}]},{"cell_type":"code","source":["# Suppression des lignes où 'target' est 'diver' ou 'turtle'\n","\n","targets_to_drop = [\"diver\", \"turtle\"]\n","df = df[~df['target'].isin(targets_to_drop)]"],"metadata":{"id":"rrxuenAdJvfy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["nonIdentify = ['CSPS', 'FPS', 'FSCFD','FSC','Pbrt', 'Pbr', 'Pbt' ,'Pb', 'PB', 'PS', 'PU','RFPSFD', 'RFPSFU', 'RFPSRD', 'RFPSRU', 'RFPS', 'SCFD', 'SC','SPSFD' ,'SPSFU', 'SPSRD' ,'SPSRU' ,'SPS' ,'SSC','UCFD' ,'UCFPS' ,'UCFU' ,'UC', 'UFPSFD', 'UFPSFU' ,'UFPSRD' ,'UFPSRFD' ,'UFPSRU', 'UFPS']  # Replace with your actual class names or values\n","semantic = [\"boat\", 'bio', \"bioback\",\"grouper\",\"parrot\",\"rain\",'shock',\"species2\",\"whale\"]\n","\n","# Fonction de remplacement\n","def map_targets(target):\n","    if target in nonIdentify:\n","        return \"abstract\"\n","    elif target in semantic:\n","        return \"semantic\"\n","    else:\n","        return \"unknown\"  # Si jamais une catégorie n'est pas dans les deux listes\n","\n","# Application de la fonction de mapping\n","df['target'] = df['target'].apply(map_targets)\n","\n","# Vérification des résultats\n","print(df['target'].value_counts())\n","df"],"metadata":{"id":"bu1rpHrD1sKk","colab":{"base_uri":"https://localhost:8080/","height":493},"executionInfo":{"status":"ok","timestamp":1733915843895,"user_tz":-60,"elapsed":274,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"734d5f4b-f933-416b-cf78-22ebd195e79a"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["target\n","abstract    299\n","semantic     90\n","Name: count, dtype: int64\n"]},{"output_type":"execute_result","data":{"text/plain":["                                                  name    target  \\\n","0    bioback_EUR000_possession_20181116_123632.991_...  semantic   \n","1    bioback_EUR000_possession_20181116_123632.991_...  semantic   \n","2    bioback_EUR000_possession_20181116_123632.991_...  semantic   \n","3    bioback_EUR000_possession_20190121_124442.685_...  semantic   \n","4    bioback_EUR000_possession_20190121_124442.685_...  semantic   \n","..                                                 ...       ...   \n","391  whale_MAY045_channelA_2022-09-06_18-14-59_2703...  semantic   \n","392  whale_MAY045_channelA_2022-09-06_19-42-23_1316...  semantic   \n","393  whale_MAY045_channelA_2022-09-06_19-42-23_2534...  semantic   \n","394  whale_MAY045_channelA_2022-09-06_19-42-23_4632...  semantic   \n","395  whale_MAY045_channelA_2022-09-13_18-14-59_4221...  semantic   \n","\n","                                             file_path  file_exists  \n","0    /content/drive/MyDrive/PER/Data/sounds/bioback...         True  \n","1    /content/drive/MyDrive/PER/Data/sounds/bioback...         True  \n","2    /content/drive/MyDrive/PER/Data/sounds/bioback...         True  \n","3    /content/drive/MyDrive/PER/Data/sounds/bioback...         True  \n","4    /content/drive/MyDrive/PER/Data/sounds/bioback...         True  \n","..                                                 ...          ...  \n","391  /content/drive/MyDrive/PER/Data/sounds/whale_M...         True  \n","392  /content/drive/MyDrive/PER/Data/sounds/whale_M...         True  \n","393  /content/drive/MyDrive/PER/Data/sounds/whale_M...         True  \n","394  /content/drive/MyDrive/PER/Data/sounds/whale_M...         True  \n","395  /content/drive/MyDrive/PER/Data/sounds/whale_M...         True  \n","\n","[389 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-d1df5fff-440d-4929-9a5c-ccc452aa37ca\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>name</th>\n","      <th>target</th>\n","      <th>file_path</th>\n","      <th>file_exists</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>bioback_EUR000_possession_20181116_123632.991_...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/bioback...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>bioback_EUR000_possession_20181116_123632.991_...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/bioback...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>bioback_EUR000_possession_20181116_123632.991_...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/bioback...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>bioback_EUR000_possession_20190121_124442.685_...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/bioback...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>bioback_EUR000_possession_20190121_124442.685_...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/bioback...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>391</th>\n","      <td>whale_MAY045_channelA_2022-09-06_18-14-59_2703...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/whale_M...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>392</th>\n","      <td>whale_MAY045_channelA_2022-09-06_19-42-23_1316...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/whale_M...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>393</th>\n","      <td>whale_MAY045_channelA_2022-09-06_19-42-23_2534...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/whale_M...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>394</th>\n","      <td>whale_MAY045_channelA_2022-09-06_19-42-23_4632...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/whale_M...</td>\n","      <td>True</td>\n","    </tr>\n","    <tr>\n","      <th>395</th>\n","      <td>whale_MAY045_channelA_2022-09-13_18-14-59_4221...</td>\n","      <td>semantic</td>\n","      <td>/content/drive/MyDrive/PER/Data/sounds/whale_M...</td>\n","      <td>True</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>389 rows × 4 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d1df5fff-440d-4929-9a5c-ccc452aa37ca')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-d1df5fff-440d-4929-9a5c-ccc452aa37ca button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-d1df5fff-440d-4929-9a5c-ccc452aa37ca');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-94b2536c-cbbf-40ee-9ad3-70949916bed9\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-94b2536c-cbbf-40ee-9ad3-70949916bed9')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-94b2536c-cbbf-40ee-9ad3-70949916bed9 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_bc3d01a2-15aa-4d4e-bf18-304796332da3\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_bc3d01a2-15aa-4d4e-bf18-304796332da3 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df","summary":"{\n  \"name\": \"df\",\n  \"rows\": 389,\n  \"fields\": [\n    {\n      \"column\": \"name\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 389,\n        \"samples\": [\n          \"SPS_MAY044_channelA_2022-11-01_16-58-35_3204sec.wav\",\n          \"FPS_MAY044_channelA_2023-09-03_23-04-22_835sec.wav\",\n          \"RFPSFU_MAY044_channelA_2022-11-20_17-08-19_3966sec.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"target\",\n      \"properties\": {\n        \"dtype\": \"category\",\n        \"num_unique_values\": 2,\n        \"samples\": [\n          \"abstract\",\n          \"semantic\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file_path\",\n      \"properties\": {\n        \"dtype\": \"string\",\n        \"num_unique_values\": 389,\n        \"samples\": [\n          \"/content/drive/MyDrive/PER/Data/sounds/SPS_MAY044_channelA_2022-11-01_16-58-35_3204sec.wav\",\n          \"/content/drive/MyDrive/PER/Data/sounds/FPS_MAY044_channelA_2023-09-03_23-04-22_835sec.wav\"\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"file_exists\",\n      \"properties\": {\n        \"dtype\": \"boolean\",\n        \"num_unique_values\": 1,\n        \"samples\": [\n          true\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":7}]},{"cell_type":"code","source":["plt.figure(figsize=(8,6))\n","sns.countplot(data=df, x='target', palette='Set2')\n","\n","# Personnalisation du graphique\n","plt.title('Répartition des Classes')\n","plt.xlabel('Classe')\n","plt.ylabel('Nombre d\\'occurrences')\n","plt.xticks(ticks=[0, 1], labels=['abstract', 'semantic'])  # Remplacer les étiquettes\n","plt.tight_layout()\n","\n","# Afficher le graphique\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":694},"id":"AKqUjOTlC7Go","executionInfo":{"status":"ok","timestamp":1733915847938,"user_tz":-60,"elapsed":511,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"0c7f0ed3-cbc5-4371-a7c5-363fc6acbca9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-8-add1a5ad191a>:2: FutureWarning: \n","\n","Passing `palette` without assigning `hue` is deprecated and will be removed in v0.14.0. Assign the `x` variable to `hue` and set `legend=False` for the same effect.\n","\n","  sns.countplot(data=df, x='target', palette='Set2')\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["### Definition des Fonctions d'extraction des features"],"metadata":{"id":"9wH0460hvKD2"}},{"cell_type":"code","source":["def MfccExtractor(file_path):\n","    y, sr = librosa.load(file_path, sr=None)  # Conserve la fréquence d'échantillonnage d'origine\n","    mfcc = librosa.feature.mfcc(y=y, sr=sr, n_mfcc=13)  # Extrait 13 MFCCs\n","    mfcc_flat = mfcc.mean(axis=1)  # Prend la moyenne sur chaque MFCC (élimine la dépendance à la longueur)\n","    return mfcc_flat"],"metadata":{"id":"NBSiS564vI98"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Extraction des Features"],"metadata":{"id":"rUX_GIb030Ex"}},{"cell_type":"code","source":["mfcc_features = []\n","\n","for index, row in df.iterrows():\n","    file_path = row['file_path']\n","    try:\n","        mfcc_flat = MfccExtractor(file_path)\n","        mfcc_features.append(mfcc_flat)\n","    except Exception as e:\n","        print(f\"Erreur de traitement du fichier {file_path}: {e}\")\n","        mfcc_features.append(np.zeros(13))"],"metadata":{"id":"anmoTzdpvTPG"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["### Insertion des Features dans le DataFrame"],"metadata":{"id":"WzL_lcZYvx-1"}},{"cell_type":"code","source":["df[\"MFCC\"] = mfcc_features"],"metadata":{"id":"Mcv6Ekk6viAc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df = df.drop(['file_path', 'file_exists'], axis=1)"],"metadata":{"id":"3Lo33e6YwDCY"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["label_encoder = LabelEncoder()\n","df[\"target\"] = label_encoder.fit_transform(df[\"target\"])\n","\n","X = np.array(df[\"MFCC\"].tolist())\n","y = df[\"target\"].values"],"metadata":{"id":"Kxpr0lOEwDm6"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["if avec_syntetiques :\n","  from imblearn.over_sampling import SMOTE\n","\n","\n","  # Instanciation de SMOTE\n","  smote = SMOTE(sampling_strategy='auto', random_state=42)\n","\n","  # Application de SMOTE\n","  X_resampled, y_resampled = smote.fit_resample(X, y)\n","\n","  # Vérification des nouvelles proportions\n","  print(len(X_resampled))\n","  print(len(y_resampled))\n","  X_train, X_test, y_train, y_test = train_test_split(X_resampled, y_resampled, test_size=0.2, random_state=42,stratify=y_resampled)\n","else :\n","  X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42,stratify=y)\n"],"metadata":{"id":"551K6i7CK9hX"},"execution_count":null,"outputs":[]},{"cell_type":"markdown","source":["#SVC"],"metadata":{"id":"qpY7m2cWLGSL"}},{"cell_type":"code","source":["# 1. Créer une instance du modèle SVC\n","svc = SVC(random_state=42)\n","\n","# 2. Entraîner le modèle sur les données d'entraînement\n","svc.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":100},"id":"j-2kQnzXLHrE","executionInfo":{"status":"ok","timestamp":1733306591890,"user_tz":-60,"elapsed":12,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"7a101fff-8064-4744-8d1a-971992fc6b34"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["SVC(random_state=42)"],"text/html":["<style>#sk-container-id-8 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-8 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-8 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-8 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-8 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-8 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-8 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-8 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-8 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-8 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-8 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-8 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-8 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-8 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-8 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-8 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-8 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-8 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-8 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-8 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-8 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-8 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-8 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-8 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-8 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-8 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-8 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-8 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-8 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-8 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-8 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-8 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-8\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>SVC(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-8\" type=\"checkbox\" checked><label for=\"sk-estimator-id-8\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;SVC<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.svm.SVC.html\">?<span>Documentation for SVC</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>SVC(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":103}]},{"cell_type":"code","source":["preds = svc.predict(X_test)\n","\n","# Evaluate the accuracy\n","conf_matrix = confusion_matrix(y_test, preds,labels=np.arange(len(label_encoder.classes_)))\n","\n","True_Abstract = conf_matrix[0][0]\n","False_Abstract = conf_matrix[0][1]\n","False_Semantic = conf_matrix[1][0]\n","True_Semantic = conf_matrix[1][1]\n","\n","print(f\"True Abstract : {True_Abstract}\")\n","print(f\"False Abstract : {False_Abstract}\")\n","print(f\"False Semantic : {False_Semantic}\")\n","print(f\"True Semantic : {True_Semantic}\")\n","\n","acc_abs = True_Abstract/(True_Abstract+False_Abstract)\n","acc_sem = True_Semantic/(True_Semantic+False_Semantic)\n","accuracy = (acc_abs+acc_sem)/2\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")\n","\n","# Display confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\",\n","            xticklabels=label_encoder.classes_,\n","            yticklabels=label_encoder.classes_)\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","if avec_syntetiques :\n","  plt.title(f\"Confusion Matrix Detector : SVC : Synth MFCC - Acc:{accuracy}\")\n","else :\n","  pass\n","  # plt.title(f\"Confusion Matrix Detector : SVC : MFCC - Acc:{accuracy}\")\n","# plt.savefig(\"/content/drive/MyDrive/PER/Output/Classif_Basic/CM_RandomForest_MFCC.png\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":141},"id":"zZ6Zc8VTMG4B","executionInfo":{"status":"ok","timestamp":1733306592144,"user_tz":-60,"elapsed":263,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"2fe8b891-9a34-4574-e8ed-a25d25e2716d"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True Abstract : 60\n","False Abstract : 0\n","False Semantic : 18\n","True Semantic : 0\n","Accuracy: 50.00%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["# RandomForest"],"metadata":{"id":"9C9t4YRq1_H-"}},{"cell_type":"code","source":["rf = RandomForestClassifier(n_estimators=100, random_state=42)\n","\n","# 4. Train the model on the training data\n","rf.fit(X_train, y_train)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":100},"id":"jDuPanOCwh7p","executionInfo":{"status":"ok","timestamp":1733306592362,"user_tz":-60,"elapsed":225,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"826932d1-59f8-484d-f553-c730ef62fed9"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["RandomForestClassifier(random_state=42)"],"text/html":["<style>#sk-container-id-9 {\n","  /* Definition of color scheme common for light and dark mode */\n","  --sklearn-color-text: black;\n","  --sklearn-color-line: gray;\n","  /* Definition of color scheme for unfitted estimators */\n","  --sklearn-color-unfitted-level-0: #fff5e6;\n","  --sklearn-color-unfitted-level-1: #f6e4d2;\n","  --sklearn-color-unfitted-level-2: #ffe0b3;\n","  --sklearn-color-unfitted-level-3: chocolate;\n","  /* Definition of color scheme for fitted estimators */\n","  --sklearn-color-fitted-level-0: #f0f8ff;\n","  --sklearn-color-fitted-level-1: #d4ebff;\n","  --sklearn-color-fitted-level-2: #b3dbfd;\n","  --sklearn-color-fitted-level-3: cornflowerblue;\n","\n","  /* Specific color for light theme */\n","  --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, white)));\n","  --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, black)));\n","  --sklearn-color-icon: #696969;\n","\n","  @media (prefers-color-scheme: dark) {\n","    /* Redefinition of color scheme for dark theme */\n","    --sklearn-color-text-on-default-background: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-background: var(--sg-background-color, var(--theme-background, var(--jp-layout-color0, #111)));\n","    --sklearn-color-border-box: var(--sg-text-color, var(--theme-code-foreground, var(--jp-content-font-color1, white)));\n","    --sklearn-color-icon: #878787;\n","  }\n","}\n","\n","#sk-container-id-9 {\n","  color: var(--sklearn-color-text);\n","}\n","\n","#sk-container-id-9 pre {\n","  padding: 0;\n","}\n","\n","#sk-container-id-9 input.sk-hidden--visually {\n","  border: 0;\n","  clip: rect(1px 1px 1px 1px);\n","  clip: rect(1px, 1px, 1px, 1px);\n","  height: 1px;\n","  margin: -1px;\n","  overflow: hidden;\n","  padding: 0;\n","  position: absolute;\n","  width: 1px;\n","}\n","\n","#sk-container-id-9 div.sk-dashed-wrapped {\n","  border: 1px dashed var(--sklearn-color-line);\n","  margin: 0 0.4em 0.5em 0.4em;\n","  box-sizing: border-box;\n","  padding-bottom: 0.4em;\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","#sk-container-id-9 div.sk-container {\n","  /* jupyter's `normalize.less` sets `[hidden] { display: none; }`\n","     but bootstrap.min.css set `[hidden] { display: none !important; }`\n","     so we also need the `!important` here to be able to override the\n","     default hidden behavior on the sphinx rendered scikit-learn.org.\n","     See: https://github.com/scikit-learn/scikit-learn/issues/21755 */\n","  display: inline-block !important;\n","  position: relative;\n","}\n","\n","#sk-container-id-9 div.sk-text-repr-fallback {\n","  display: none;\n","}\n","\n","div.sk-parallel-item,\n","div.sk-serial,\n","div.sk-item {\n","  /* draw centered vertical line to link estimators */\n","  background-image: linear-gradient(var(--sklearn-color-text-on-default-background), var(--sklearn-color-text-on-default-background));\n","  background-size: 2px 100%;\n","  background-repeat: no-repeat;\n","  background-position: center center;\n","}\n","\n","/* Parallel-specific style estimator block */\n","\n","#sk-container-id-9 div.sk-parallel-item::after {\n","  content: \"\";\n","  width: 100%;\n","  border-bottom: 2px solid var(--sklearn-color-text-on-default-background);\n","  flex-grow: 1;\n","}\n","\n","#sk-container-id-9 div.sk-parallel {\n","  display: flex;\n","  align-items: stretch;\n","  justify-content: center;\n","  background-color: var(--sklearn-color-background);\n","  position: relative;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item {\n","  display: flex;\n","  flex-direction: column;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:first-child::after {\n","  align-self: flex-end;\n","  width: 50%;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:last-child::after {\n","  align-self: flex-start;\n","  width: 50%;\n","}\n","\n","#sk-container-id-9 div.sk-parallel-item:only-child::after {\n","  width: 0;\n","}\n","\n","/* Serial-specific style estimator block */\n","\n","#sk-container-id-9 div.sk-serial {\n","  display: flex;\n","  flex-direction: column;\n","  align-items: center;\n","  background-color: var(--sklearn-color-background);\n","  padding-right: 1em;\n","  padding-left: 1em;\n","}\n","\n","\n","/* Toggleable style: style used for estimator/Pipeline/ColumnTransformer box that is\n","clickable and can be expanded/collapsed.\n","- Pipeline and ColumnTransformer use this feature and define the default style\n","- Estimators will overwrite some part of the style using the `sk-estimator` class\n","*/\n","\n","/* Pipeline and ColumnTransformer style (default) */\n","\n","#sk-container-id-9 div.sk-toggleable {\n","  /* Default theme specific background. It is overwritten whether we have a\n","  specific estimator or a Pipeline/ColumnTransformer */\n","  background-color: var(--sklearn-color-background);\n","}\n","\n","/* Toggleable label */\n","#sk-container-id-9 label.sk-toggleable__label {\n","  cursor: pointer;\n","  display: block;\n","  width: 100%;\n","  margin-bottom: 0;\n","  padding: 0.5em;\n","  box-sizing: border-box;\n","  text-align: center;\n","}\n","\n","#sk-container-id-9 label.sk-toggleable__label-arrow:before {\n","  /* Arrow on the left of the label */\n","  content: \"▸\";\n","  float: left;\n","  margin-right: 0.25em;\n","  color: var(--sklearn-color-icon);\n","}\n","\n","#sk-container-id-9 label.sk-toggleable__label-arrow:hover:before {\n","  color: var(--sklearn-color-text);\n","}\n","\n","/* Toggleable content - dropdown */\n","\n","#sk-container-id-9 div.sk-toggleable__content {\n","  max-height: 0;\n","  max-width: 0;\n","  overflow: hidden;\n","  text-align: left;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content pre {\n","  margin: 0.2em;\n","  border-radius: 0.25em;\n","  color: var(--sklearn-color-text);\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-toggleable__content.fitted pre {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","#sk-container-id-9 input.sk-toggleable__control:checked~div.sk-toggleable__content {\n","  /* Expand drop-down */\n","  max-height: 200px;\n","  max-width: 100%;\n","  overflow: auto;\n","}\n","\n","#sk-container-id-9 input.sk-toggleable__control:checked~label.sk-toggleable__label-arrow:before {\n","  content: \"▾\";\n","}\n","\n","/* Pipeline/ColumnTransformer-specific style */\n","\n","#sk-container-id-9 div.sk-label input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-label.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator-specific style */\n","\n","/* Colorize estimator box */\n","#sk-container-id-9 div.sk-estimator input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted input.sk-toggleable__control:checked~label.sk-toggleable__label {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-label label.sk-toggleable__label,\n","#sk-container-id-9 div.sk-label label {\n","  /* The background is the default theme color */\n","  color: var(--sklearn-color-text-on-default-background);\n","}\n","\n","/* On hover, darken the color of the background */\n","#sk-container-id-9 div.sk-label:hover label.sk-toggleable__label {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","/* Label box, darken color on hover, fitted */\n","#sk-container-id-9 div.sk-label.fitted:hover label.sk-toggleable__label.fitted {\n","  color: var(--sklearn-color-text);\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Estimator label */\n","\n","#sk-container-id-9 div.sk-label label {\n","  font-family: monospace;\n","  font-weight: bold;\n","  display: inline-block;\n","  line-height: 1.2em;\n","}\n","\n","#sk-container-id-9 div.sk-label-container {\n","  text-align: center;\n","}\n","\n","/* Estimator-specific */\n","#sk-container-id-9 div.sk-estimator {\n","  font-family: monospace;\n","  border: 1px dotted var(--sklearn-color-border-box);\n","  border-radius: 0.25em;\n","  box-sizing: border-box;\n","  margin-bottom: 0.5em;\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-0);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-0);\n","}\n","\n","/* on hover */\n","#sk-container-id-9 div.sk-estimator:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-2);\n","}\n","\n","#sk-container-id-9 div.sk-estimator.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-2);\n","}\n","\n","/* Specification for estimator info (e.g. \"i\" and \"?\") */\n","\n","/* Common style for \"i\" and \"?\" */\n","\n",".sk-estimator-doc-link,\n","a:link.sk-estimator-doc-link,\n","a:visited.sk-estimator-doc-link {\n","  float: right;\n","  font-size: smaller;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1em;\n","  height: 1em;\n","  width: 1em;\n","  text-decoration: none !important;\n","  margin-left: 1ex;\n","  /* unfitted */\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-unfitted-level-1);\n","}\n","\n",".sk-estimator-doc-link.fitted,\n","a:link.sk-estimator-doc-link.fitted,\n","a:visited.sk-estimator-doc-link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","div.sk-estimator:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link:hover,\n",".sk-estimator-doc-link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","div.sk-estimator.fitted:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover,\n","div.sk-label-container:hover .sk-estimator-doc-link.fitted:hover,\n",".sk-estimator-doc-link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","/* Span, style for the box shown on hovering the info icon */\n",".sk-estimator-doc-link span {\n","  display: none;\n","  z-index: 9999;\n","  position: relative;\n","  font-weight: normal;\n","  right: .2ex;\n","  padding: .5ex;\n","  margin: .5ex;\n","  width: min-content;\n","  min-width: 20ex;\n","  max-width: 50ex;\n","  color: var(--sklearn-color-text);\n","  box-shadow: 2pt 2pt 4pt #999;\n","  /* unfitted */\n","  background: var(--sklearn-color-unfitted-level-0);\n","  border: .5pt solid var(--sklearn-color-unfitted-level-3);\n","}\n","\n",".sk-estimator-doc-link.fitted span {\n","  /* fitted */\n","  background: var(--sklearn-color-fitted-level-0);\n","  border: var(--sklearn-color-fitted-level-3);\n","}\n","\n",".sk-estimator-doc-link:hover span {\n","  display: block;\n","}\n","\n","/* \"?\"-specific style due to the `<a>` HTML tag */\n","\n","#sk-container-id-9 a.estimator_doc_link {\n","  float: right;\n","  font-size: 1rem;\n","  line-height: 1em;\n","  font-family: monospace;\n","  background-color: var(--sklearn-color-background);\n","  border-radius: 1rem;\n","  height: 1rem;\n","  width: 1rem;\n","  text-decoration: none;\n","  /* unfitted */\n","  color: var(--sklearn-color-unfitted-level-1);\n","  border: var(--sklearn-color-unfitted-level-1) 1pt solid;\n","}\n","\n","#sk-container-id-9 a.estimator_doc_link.fitted {\n","  /* fitted */\n","  border: var(--sklearn-color-fitted-level-1) 1pt solid;\n","  color: var(--sklearn-color-fitted-level-1);\n","}\n","\n","/* On hover */\n","#sk-container-id-9 a.estimator_doc_link:hover {\n","  /* unfitted */\n","  background-color: var(--sklearn-color-unfitted-level-3);\n","  color: var(--sklearn-color-background);\n","  text-decoration: none;\n","}\n","\n","#sk-container-id-9 a.estimator_doc_link.fitted:hover {\n","  /* fitted */\n","  background-color: var(--sklearn-color-fitted-level-3);\n","}\n","</style><div id=\"sk-container-id-9\" class=\"sk-top-container\"><div class=\"sk-text-repr-fallback\"><pre>RandomForestClassifier(random_state=42)</pre><b>In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. <br />On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.</b></div><div class=\"sk-container\" hidden><div class=\"sk-item\"><div class=\"sk-estimator fitted sk-toggleable\"><input class=\"sk-toggleable__control sk-hidden--visually\" id=\"sk-estimator-id-9\" type=\"checkbox\" checked><label for=\"sk-estimator-id-9\" class=\"sk-toggleable__label fitted sk-toggleable__label-arrow fitted\">&nbsp;&nbsp;RandomForestClassifier<a class=\"sk-estimator-doc-link fitted\" rel=\"noreferrer\" target=\"_blank\" href=\"https://scikit-learn.org/1.5/modules/generated/sklearn.ensemble.RandomForestClassifier.html\">?<span>Documentation for RandomForestClassifier</span></a><span class=\"sk-estimator-doc-link fitted\">i<span>Fitted</span></span></label><div class=\"sk-toggleable__content fitted\"><pre>RandomForestClassifier(random_state=42)</pre></div> </div></div></div></div>"]},"metadata":{},"execution_count":105}]},{"cell_type":"code","source":["preds = rf.predict(X_test)\n","\n","conf_matrix = confusion_matrix(y_test, preds,labels=np.arange(len(label_encoder.classes_)))\n","\n","True_Abstract = conf_matrix[0][0]\n","False_Abstract = conf_matrix[0][1]\n","False_Semantic = conf_matrix[1][0]\n","True_Semantic = conf_matrix[1][1]\n","\n","print(f\"True Abstract : {True_Abstract}\")\n","print(f\"False Abstract : {False_Abstract}\")\n","print(f\"False Semantic : {False_Semantic}\")\n","print(f\"True Semantic : {True_Semantic}\")\n","\n","acc_abs = True_Abstract/(True_Abstract+False_Abstract)\n","acc_sem = True_Semantic/(True_Semantic+False_Semantic)\n","accuracy = (acc_abs+acc_sem)/2\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")\n","\n","# Display confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\",\n","            xticklabels=label_encoder.classes_,\n","            yticklabels=label_encoder.classes_)\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","if avec_syntetiques :\n","  plt.title(f\"Confusion Matrix Detector : RandomForest : Synth MFCC - Acc:{accuracy}\")\n","else :\n","  pass\n","\n","  # plt.title(f\"Confusion Matrix Detector : RandomForest : MFCC - Acc:{accuracy}\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"s2Gv6V29xEcj","executionInfo":{"status":"ok","timestamp":1733306593040,"user_tz":-60,"elapsed":686,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"340d72ae-bf66-4c8d-8e41-eb2c4484a3a9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True Abstract : 58\n","False Abstract : 2\n","False Semantic : 11\n","True Semantic : 7\n","Accuracy: 67.78%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#XGBoost"],"metadata":{"id":"KYUVK6NY2h7-"}},{"cell_type":"code","source":["train_data = xgb.DMatrix(data=X_train, label=y_train)\n","test_data = xgb.DMatrix(data=X_test, label=y_test)"],"metadata":{"id":"nLcL5xr12jJ2"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["# param_grid = {\n","#     'max_depth': [3, 4, 5],\n","#     'learning_rate': [0.01, 0.1, 0.2],\n","#     'n_estimators': [50, 100, 150],\n","#     'objective': ['multi:softmax'],\n","#     'num_class': [2],\n","# }\n","\n","# # Initialize the XGBClassifier\n","# xgb_clf = xgb.XGBClassifier()\n","\n","# # Initialize GridSearchCV with cross-validation\n","# grid_search = GridSearchCV(estimator=xgb_clf, param_grid=param_grid, scoring='accuracy', cv=3, verbose=1)\n","\n","# # Fit the model\n","# grid_search.fit(X_train, y_train)\n","\n","# # Print the best parameters found by GridSearchCV\n","# print(\"Best Parameters:\", grid_search.best_params_)\n","\n","# # Use the best model to predict the test set\n","# best_model = grid_search.best_estimator_\n","# preds = best_model.predict(X_test)\n","\n","\n","xgb_model = xgb.XGBClassifier(\n","    learning_rate=0.1,         # Learning rate for boosting\n","    max_depth=4,               # Maximum depth of each tree\n","    n_estimators=50,           # Number of trees (boosting rounds)\n","    objective='binary:logistic',  # Objective for binary classification (use 'multi:softmax' for multi-class)\n","    random_state=42            # For reproducibility\n",")\n","\n","# Train the model on the training data\n","xgb_model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","preds = xgb_model.predict(X_test)"],"metadata":{"id":"uP82PAWm2js8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["\n","conf_matrix = confusion_matrix(y_test, preds)\n","\n","True_Abstract = conf_matrix[0][0]\n","False_Abstract = conf_matrix[0][1]\n","False_Semantic = conf_matrix[1][0]\n","True_Semantic = conf_matrix[1][1]\n","\n","print(f\"True Abstract : {True_Abstract}\")\n","print(f\"False Abstract : {False_Abstract}\")\n","print(f\"False Semantic : {False_Semantic}\")\n","print(f\"True Semantic : {True_Semantic}\")\n","\n","acc_abs = True_Abstract/(True_Abstract+False_Abstract)\n","acc_sem = True_Semantic/(True_Semantic+False_Semantic)\n","accuracy = (acc_abs+acc_sem)/2\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")\n","\n","# Display confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\",\n","            xticklabels=label_encoder.classes_,\n","            yticklabels=label_encoder.classes_)\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","if avec_syntetiques :\n","  plt.title(f\"Confusion Matrix Detector : XGBoost : Synth MFCC - Acc:{accuracy}\")\n","else :\n","  pass\n","  # plt.title(f\"Confusion Matrix Detector : XGBoost : MFCC - Acc:{accuracy}\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"BfwlJKvY2nTM","executionInfo":{"status":"ok","timestamp":1733306786847,"user_tz":-60,"elapsed":267,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"dfef9709-d3fa-4d4f-c9ab-bf92035077d3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True Abstract : 57\n","False Abstract : 3\n","False Semantic : 11\n","True Semantic : 7\n","Accuracy: 66.94%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"markdown","source":["#LightGBM"],"metadata":{"id":"hhiuBJ-V3JGz"}},{"cell_type":"code","source":["# model = lgb.LGBMClassifier()\n","\n","# # Define the hyperparameters for grid search\n","# param_grid = {\n","#     'num_leaves': [31, 50],  # Réduit le nombre de valeurs à tester\n","#     'max_depth': [10, 20],\n","#     'learning_rate': [0.05, 0.1],\n","#     'n_estimators': [50, 100],\n","#     'min_child_samples': [10, 20],\n","#     'subsample': [0.6, 0.8],\n","#     'colsample_bytree': [0.6, 1.0]\n","# }\n","\n","# # Create GridSearchCV object with cross-validation (cv=5 for 5-fold cross-validation)\n","# grid_search = GridSearchCV(estimator=model, param_grid=param_grid,\n","#                            cv=5, n_jobs=-1, verbose=1, scoring='accuracy')\n","\n","# # Fit the grid search to the data\n","# grid_search.fit(X_train, y_train)\n","\n","# # Print the best parameters and the best score found by GridSearchCV\n","# print(\"Best parameters found by GridSearchCV:\", grid_search.best_params_)\n","# print(\"Best accuracy score found by GridSearchCV:\", grid_search.best_score_)\n","\n","# # Use the best model found by GridSearchCV\n","# best_model = grid_search.best_estimator_\n","\n","# # Predict with the best model\n","# preds = best_model.predict(X_test)\n","\n","\n","lgb_model = lgb.LGBMClassifier(\n","    colsample_bytree=1.0,           # Fraction of features to choose for each tree\n","    learning_rate=0.1,              # Learning rate for boosting\n","    max_depth=10,                   # Maximum depth of each tree\n","    min_child_samples=10,           # Minimum number of samples in a leaf node\n","    n_estimators=100,               # Number of trees (boosting rounds)\n","    num_leaves=31,                  # Maximum number of leaves per tree\n","    subsample=0.6,                  # Fraction of data to use for each tree\n","    random_state=42                 # For reproducibility\n",")\n","\n","# Train the model on the training data\n","lgb_model.fit(X_train, y_train)\n","\n","# Predict on the test data\n","preds = lgb_model.predict(X_test)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CFMh7NuU3Mb2","executionInfo":{"status":"ok","timestamp":1733306593411,"user_tz":-60,"elapsed":10,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"b953c122-cbe1-4467-94d3-be79dd56b086","collapsed":true},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[LightGBM] [Info] Number of positive: 72, number of negative: 239\n","[LightGBM] [Info] Auto-choosing col-wise multi-threading, the overhead of testing was 0.000145 seconds.\n","You can set `force_col_wise=true` to remove the overhead.\n","[LightGBM] [Info] Total Bins 1358\n","[LightGBM] [Info] Number of data points in the train set: 311, number of used features: 13\n","[LightGBM] [Info] [binary:BoostFromScore]: pavg=0.231511 -> initscore=-1.199797\n","[LightGBM] [Info] Start training from score -1.199797\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n","[LightGBM] [Warning] No further splits with positive gain, best gain: -inf\n"]}]},{"cell_type":"code","source":["# Generate confusion matrix\n","conf_matrix = confusion_matrix(y_test, preds)\n","\n","True_Abstract = conf_matrix[0][0]\n","False_Abstract = conf_matrix[0][1]\n","False_Semantic = conf_matrix[1][0]\n","True_Semantic = conf_matrix[1][1]\n","\n","print(f\"True Abstract : {True_Abstract}\")\n","print(f\"False Abstract : {False_Abstract}\")\n","print(f\"False Semantic : {False_Semantic}\")\n","print(f\"True Semantic : {True_Semantic}\")\n","\n","acc_abs = True_Abstract/(True_Abstract+False_Abstract)\n","acc_sem = True_Semantic/(True_Semantic+False_Semantic)\n","accuracy = (acc_abs+acc_sem)/2\n","print(f\"Accuracy: {accuracy * 100:.2f}%\")\n","\n","# Display confusion matrix\n","plt.figure(figsize=(8, 6))\n","sns.heatmap(conf_matrix, annot=True, fmt=\"d\", cmap=\"Blues\",\n","            xticklabels=label_encoder.classes_,\n","            yticklabels=label_encoder.classes_)\n","plt.xlabel(\"Predicted Labels\")\n","plt.ylabel(\"True Labels\")\n","if avec_syntetiques :\n","  plt.title(f\"Confusion Matrix Detector : LightGBM : Synth MFCC - Acc:{accuracy}\")\n","else :\n","  pass\n","\n","  # plt.title(f\"Confusion Matrix Detector : LightGBM : MFCC - Acc:{accuracy}\")\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":649},"id":"B0hdwl9z3OVt","executionInfo":{"status":"ok","timestamp":1733306593741,"user_tz":-60,"elapsed":339,"user":{"displayName":"PER Reef Pulse","userId":"08840548459713405978"}},"outputId":"a0625b28-df2c-4817-9e78-be9d7c67bda9"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["True Abstract : 58\n","False Abstract : 2\n","False Semantic : 11\n","True Semantic : 7\n","Accuracy: 67.78%\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 800x600 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"XLsYJ6OROAeY"},"execution_count":null,"outputs":[]}]}